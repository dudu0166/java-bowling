package bowling.model.state;

import bowling.model.Score;
import bowling.model.state.finishedState.Gutter;
import bowling.model.state.finishedState.Miss;
import bowling.model.state.finishedState.Spare;
import bowling.model.state.finishedState.Strike;
import org.junit.jupiter.api.Test;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;

class BonusOpenTest {

    @Test
    void from_이전_상태가_스페어_혹은_스트라이크가_아닌_경우() {
        assertThatIllegalArgumentException()
                .isThrownBy(() -> BonusOpen.from(Gutter.of(Score.from(0), Score.from(0))))
                .withMessage("보너스 오픈 상태는 이전 상태가 스트라이크 혹은 스페어여야합니다.");
    }

    @Test
    void bowling_스트라이크_후_스트라이크() {
        BonusOpen bonusOpen = getStrikeBonusOpen();
        assertThat(bonusOpen.bowling(10) instanceof Strike).isTrue();
    }

    @Test
    void bowling_스트라이크_후_거터() {
        BonusOpen bonusOpen = getStrikeBonusOpen();
        assertThat(bonusOpen.bowling(0) instanceof Gutter).isTrue();
    }

    @Test
    void bowling_스트라이크_후_미스() {
        BonusOpen bonusOpen = getStrikeBonusOpen();
        assertThat(bonusOpen.bowling(1) instanceof Miss).isTrue();
    }

    @Test
    void bowling_스페어_후_스트라이크() {
        BonusOpen bonusOpen = getSpareBonusOpen();
        assertThat(bonusOpen.bowling(10) instanceof Strike).isTrue();
    }

    @Test
    void bowling_스페어_후_거터() {
        BonusOpen bonusOpen = getSpareBonusOpen();
        assertThat(bonusOpen.bowling(0) instanceof Gutter).isTrue();
    }

    @Test
    void bowling_스페어_후_미스() {
        BonusOpen bonusOpen = getSpareBonusOpen();
        assertThat(bonusOpen.bowling(1) instanceof Miss).isTrue();
    }

    private BonusOpen getStrikeBonusOpen(){
        return BonusOpen.from(Strike.from(Score.from(10)));
    }

    private BonusOpen getSpareBonusOpen(){
        return BonusOpen.from(Spare.of(Score.from(0), Score.from(10)));
    }
}