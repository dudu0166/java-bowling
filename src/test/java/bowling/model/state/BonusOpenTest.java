package bowling.model.state;

import bowling.model.Pins;
import bowling.model.state.bonusState.BonusOpen;
import bowling.model.state.finishedState.FinishedState;
import bowling.model.state.finishedState.Miss;
import bowling.model.state.finishedState.Spare;
import bowling.model.state.finishedState.Strike;
import org.junit.jupiter.api.Test;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;

class BonusOpenTest {

    @Test
    void from_이전_상태가_스페어_혹은_스트라이크가_아닌_경우() {
        assertThatIllegalArgumentException()
                .isThrownBy(() -> BonusOpen.from(Miss.of(Pins.from(0), Pins.from(9))))
                .withMessage("보너스 상태가 될 수 없습니다.");
    }

    @Test
    void bowling_스트라이크_후_스트라이크() {
        BonusOpen bonusOpen = getStrikeBonusOpen();
        assertThat(bonusOpen.bowling(10)).isInstanceOf(Strike.class);
    }

    @Test
    void bowling_스트라이크_후_미스() {
        BonusOpen bonusOpen = getStrikeBonusOpen();
        assertThat(bonusOpen.bowling(1)).isInstanceOf(Miss.class);
    }

    @Test
    void bowling_스페어_후_스트라이크() {
        BonusOpen bonusOpen = getSpareBonusOpen();
        assertThat(bonusOpen.bowling(10)).isInstanceOf(Strike.class);
    }

    @Test
    void bowling_스페어_후_미스() {
        BonusOpen bonusOpen = getSpareBonusOpen();
        assertThat(bonusOpen.bowling(1)).isInstanceOf(Miss.class);
    }

    private BonusOpen getStrikeBonusOpen() {
        return BonusOpen.from(Strike.from(Pins.from(10)));
    }

    private BonusOpen getSpareBonusOpen() {
        return BonusOpen.from((FinishedState) Spare.of(Pins.from(0), Pins.from(10)));
    }
}